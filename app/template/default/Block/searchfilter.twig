{#{% set Categories = repository('Eccube\\Entity\\Category').getList() %}#}
{% set Categories = ExistsCategoryList() %}
{% macro tree(Category) %}
    {% from _self import tree %}
    <a href="{{ url('product_list') }}?category_id={{ Category.id }}">
        <img class="caticon" src="/html/user_data/assets/img/category/icon_{{ Category.id }}.svg">
        <p>{{ Category.name }}</p>
    </a>
{% endmacro %}
{# @see https://github.com/bolt/bolt/pull/2388 #}
{% from _self import tree %}

<div class="popup" id="js-popup">
    <div class="innerbox">
        <div class="midashi"><span>見つける</span></div>
        <div class="closebtn" id="popup-close"><img src="{{ asset('assets/img/popup_close.png') }}" alt="close"></div>
        <div class="scrollbox">
            <input type="text" name="sa" placeholder="キーワードから探す" class="search" id="input-keywords">
            <section>
                <h6>価格帯</h6>
                <div class="chartwrap">
                    <canvas id="chart_price"></canvas>
                </div>
                <div class="noUiSlider-wrap standard">
                    <div class="range-slider"></div>
                    <ul class="text-wrap">
                        <li><p>最低料金</p><input type="text" id="input-min-price" name="min" class="min-box" value="">
                        </li>
                        <li><p>最高料金</p><input type="text" id="input-max-price" name="max" class="max-box" value="">
                        </li>
                    </ul>
                </div>
            </section>
            <section>
                <h6>カテゴリー</h6>
                <ul class="L_categories">
                    <li id="all-top-category">
                        <a href="{{ url('product_list') }}">
                            <img src="{{ asset('assets/img/category/icon_all.png') }}" alt="all category">
                            <p>すべて</p>
                        </a>
                    </li>
                    {% for Category in Categories %}
                        <li class='top-category' id="top-category-id-{{ Category.id }}" data-category_id="{{ Category.id }}">
                            {{ tree(Category) }}
                        </li>
                    {% endfor %}
                </ul>
            </section>
            <section>
                <h6>中カテゴリー</h6>
                <ul class="M_categories">
                    {% for Category in Categories %}
                        {% if Category.children|length > 0 %}
                            {% for ChildCategory in Category.children %}
                                <li class="d-none sub-category parent-category-id-{{ Category.id }}"
                                    id="sub-category-id-{{ ChildCategory.id }}"
                                    data-parent-category_id="{{ Category.id }}"
                                    data-category_id="{{ ChildCategory.id }}"
                                >
                                    <a><span>{{ ChildCategory.name }}</span></a>
                                </li>
                            {% endfor %}
                        {% endif %}


                    {% endfor %}
                </ul>
            </section>
        </div><!--/scrollbox-->
        <div class="under_display">
            <div class="flex">
                <a class="allclear" id="clearForm">すべてクリア</a>
                <button class="btn_show" id="search-product">
                    <span id="product-count">0</span>件のお礼の品を表示
                </button>
            </div>
        </div>
    </div><!--/innerbox-->
    <div class="layer" id="popup-bg"></div>
</div><!--/popup-->

<script type="text/javascript">

    /*見つけるポップアップ　価格帯チャート・スライダーレンジ複合*/
    $(() => {
        const clearForm = document.getElementById('clearForm');
        const countSpan = document.getElementById('product_count');
        const searchButton = document.getElementById('search-product');
        const $slider = $('.range-slider').get(0); //スライダー作成場所を指定
        const $min = $('.min-box'); //最小値を入力するボックスを指定
        const $max = $('.max-box'); //最大値を入力するボックスを指定
        let minVal = 0; //スライダーの最小値
        let maxVal = 100000; //スライダーの最大値
        let gap = 1000; // ハンドルの動きを1000刻みで動かす


        clearForm.addEventListener('click', function (e) {
            keywordsInput.value = ''
            minPriceInput.value = 0;
            maxPriceInput.value = label_source.slice(-1)[0] || 10000;
            $slider.noUiSlider.set([minPriceInput.value, maxPriceInput.value]);

            searchValues.name = keywordsInput.value;
            searchValues.category_id = '';
            searchValues.category_ids = [];
            searchValues.min_price = minPriceInput.value;
            searchValues.max_price = maxPriceInput.value;
            updateProductCount();

            document.querySelectorAll('.L_categories li').forEach(element=>{
                element.classList.remove('active')
                element.classList.remove('d-none')
            })
            document.querySelectorAll('.M_categories li').forEach(element=>{
                element.classList.remove('active')
                element.classList.add('d-none')
            })


        });


        const searchValues = {
            name: '',
            category_ids: [],
            min_price: 0,
            max_price: 0,
            category_id: '',
        };


        searchButton.addEventListener('click', function (e) {
            e.preventDefault();
            window.location = '/products/list?' + new URLSearchParams(searchValues).toString();

        });


        const keywordsInput = document.getElementById('input-keywords');
        keywordsInput.addEventListener('change', (e) => {
            searchValues.name = keywordsInput.value;
            updateProductCount()
        });

        const minPriceInput = document.getElementById('input-min-price');
        const maxPriceInput = document.getElementById('input-max-price');
        minPriceInput.addEventListener('change', (e) => {
            searchValues.min_price = minPriceInput.value;
            updateProductCount()
        });
        maxPriceInput.addEventListener('change', (e) => {
            searchValues.max_price = maxPriceInput.value;
            updateProductCount()
        });

        let lastCount = 0;

        const allCategoryButton = document.getElementById('all-top-category')
        const topCategorySwitches = document.querySelectorAll('.top-category')
        const subCategories = document.querySelectorAll('.sub-category');

        allCategoryButton.addEventListener('click', (e) => {
            e.preventDefault();
            searchValues.category_ids = [];
            searchValues.category_id = '';
            // update top level category display
            topCategorySwitches.forEach(element=>element.classList.remove('d-none'));
            subCategories.forEach(element=>element.classList.add('d-none'))
            document.querySelectorAll('.L_categories li').forEach(element=>element.classList.remove('active'))
            e.currentTarget.classList.add('active')

            updateProductCount();
        })

        topCategorySwitches.forEach((element) => {
            element.addEventListener('click', function (e) {
                e.preventDefault();
                console.log(e.currentTarget.getAttribute('id'))
                searchValues.category_ids = [];
                topCategorySwitches.forEach(element=>element.classList.add('d-none'))
                e.currentTarget.classList.remove('d-none')
                subCategories.forEach(element=>element.classList.add('d-none'))
                const subCategoryList = document.querySelectorAll(e.currentTarget.getAttribute('id').replace(/^top/, '.parent'))
                subCategoryList.forEach(element=>element.classList.remove('d-none'))

                document.querySelectorAll('.L_categories li').forEach(element=>element.classList.remove('active'))
                e.currentTarget.classList.add('active')
                const selectedCategoryId = e.currentTarget.getAttribute('data-category_id');
                searchValues.category_ids.push(selectedCategoryId)
                searchValues.category_id = selectedCategoryId;

                updateProductCount();

            })
        })

        const subCategoryList = document.querySelectorAll('.sub-category');
        const singleQuery = true; // category_id 一つ
        subCategoryList.forEach(element=>{
            element.addEventListener('click', function(e){
                e.preventDefault()
                const selectedCategoryId = e.currentTarget.getAttribute('data-category_id');
                console.log(e.currentTarget.classList.contains('active'))
                if (singleQuery) { // 単体
                    if (e.currentTarget.classList.contains('active')) {
                        e.currentTarget.classList.remove('active')
                        searchValues.category_id = e.currentTarget.getAttribute('data-parent-category_id');
                    } else {
                        subCategoryList.forEach(element=>element.classList.remove('active'));
                        e.currentTarget.classList.add('active')
                        searchValues.category_id = selectedCategoryId;
                    }
                } else { // 複数
                    if (e.currentTarget.classList.contains('active')) {
                        e.currentTarget.classList.remove('active')
                        searchValues.category_ids.filter(element=>element===selectedCategoryId)
                    } else {
                        e.currentTarget.classList.add('active');
                        searchValues.category_ids.push(selectedCategoryId)
                    }
                }

                updateProductCount();
            })
        })

        function updateProductCount() {

            $.ajax({
                url: '/api/product_count',
                method: 'get',
                dataType: 'json',
                data: searchValues,
            }).then((data) => {
                if (data.count !== lastCount) {
                    const counterGap = Math.abs(lastCount - data.count);
                    const customDuration = (counterGap < 10) ? 50
                        : (counterGap < 50) ? 100
                            : 2000;
                    $('#product-count').animate({
                        Counter: data.count || 0
                    }, {
                        duration: customDuration,
                        easing: 'swing',
                        step: function (now, fx) {
                            $(this).html(Math.ceil(now));
                        }
                    });
                    lastCount = data.count;
                }

            }).fail((error) => {
                console.log(error)
            })
        }

        let data_source = [];
        let label_source = [];

        $.ajax({
            type: 'get', dataType: 'json', url: '/api/price_range',
        }).then((data) => {
            data_source = data.data_source;
            label_source = data.label_source
            startChart(data_source, label_source)
            startSlider(label_source.slice(-1)[0]);
        })
            .fail((error) => console.log(error));

        function startChart(data_source, label_source) {
            if (document.getElementById("chart_price")) {

                const ctx = document.getElementById("chart_price").getContext('2d');
                const ChartDemo = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: label_source, //ココで参照
                        datasets: [{
                            label: 'price', borderColor: 'rgb(200, 200, 200,1)',
                            data: data_source, //ココで参照
                        },]
                    }, options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: false,
                            tooltip: {
                                enabled: false,
                            },
                        },
                        scales: {
                            x: {
                                display: false,
                                ticks: {
                                    major: {
                                        enabled: false
                                    },
                                }
                            },
                            y: {
                                display: false,
                            }
                        },
                    }
                });
            }
        }

        function startSlider(maxVal) {

            //noUiSliderをセットする
            noUiSlider.create($slider, {
                start: [minVal, maxVal], // ハンドルの初期位置を最小値・最大値にする
                connect: true,
                step: gap, // ハンドルが一度で動く数値を指定（今回はgapを指定しているので100毎動く）
                range: {
                    'min': minVal, // スライダーの最小値を指定（minValに入っている、0が最大値）
                    'max': maxVal // スライダーの最大値を指定（maxValに入っている、1,000が最小値）
                },

            });

            //noUiSliderイベント
            let offTimer;
            $slider.noUiSlider.on('update', function (values, handle) {
                //現在の最小値・最大値を取得
                const value = Math.floor(values[handle]);
                if (handle) {
                    $max.get(0).value = value; //現在の最大値
                    searchValues.max_price = value;
                } else {
                    $min.get(0).value = value; //現在の最小値
                    searchValues.min_price = value;
                }
                if (offTimer) {
                    clearTimeout(offTimer);
                }
                offTimer = setTimeout(updateProductCount, 500);
            });

            //最小値をinputにセット
            $($min.get(0)).on('change', function () {
                $slider.noUiSlider.set([this.value, null]);
                searchValues.min_price = this.value;
            });

            //最大値をinputにセット
            $($max.get(0)).on('change', function () {
                $slider.noUiSlider.set([null, this.value]);
                searchValues.max_price = this.value;
            });
        }
    })


</script>